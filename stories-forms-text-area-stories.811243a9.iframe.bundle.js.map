{"version":3,"file":"stories-forms-text-area-stories.811243a9.iframe.bundle.js","mappings":";;;AAgBA;AACA;AACA;;AAGA","sources":["webpack://@rosalind/rosalind-template/./docs/stories/forms/text-area.stories.js"],"sourcesContent":["/* eslint-disable import/no-extraneous-dependencies, no-unused-vars */\n\nimport { within, waitFor, userEvent } from '@storybook/testing-library';\nimport { expect } from '@storybook/jest';\nimport dedent from 'dedent';\nexport default {\n  title: 'Design System/Atoms/Forms/TextArea'\n};\nconst TextAreaExample = ({\n  label,\n  required,\n  disabled,\n  help\n}) => dedent /* html */`\n  <form>\n    <div class=\"group\">\n      <label for=\"name\">${label}</label>\n      <textarea type=\"text\" id=\"name\" placeholder=\"Placeholder\" ${required ? 'required' : ''}  ${disabled ? 'disabled' : ''}></textarea>\n      <span>${help}</span>\n    </div>\n  </form>`;\nexport const Default = {\n  args: {\n    label: 'First Name',\n    help: 'A clever desciption of this field',\n    required: false,\n    disabled: false\n  },\n  render: args => TextAreaExample(args),\n  play: async ({\n    canvasElement\n  }) => {\n    const canvas = within(canvasElement);\n    expect(canvas.getByText('First Name')).toBeInTheDocument();\n    expect(canvas.getByPlaceholderText('Placeholder')).toBeInTheDocument();\n    expect(canvas.getByText('A clever desciption of this field')).toBeInTheDocument();\n  }\n};\nexport const Filled = {\n  args: {\n    label: 'First Name',\n    help: 'A clever desciption of this field',\n    required: false,\n    disabled: false\n  },\n  render: args => TextAreaExample(args),\n  play: async ({\n    canvasElement\n  }) => {\n    const canvas = within(canvasElement);\n    const input = canvas.getByPlaceholderText('Placeholder');\n    userEvent.type(input, 'Johnny Appleseed');\n    expect(input.value).toEqual('Johnny Appleseed');\n  }\n};\nexport const Required = {\n  args: {\n    label: 'First Name',\n    help: 'A clever desciption of this field',\n    required: true,\n    disabled: false\n  },\n  render: args => TextAreaExample(args),\n  play: async ({\n    canvasElement\n  }) => {\n    const canvas = within(canvasElement);\n    const input = canvas.getByPlaceholderText('Placeholder');\n    expect(input.hasAttribute('required')).toBeTruthy();\n    userEvent.click(input);\n  }\n};\nexport const Valid = {\n  args: {\n    label: 'First Name',\n    help: 'A clever desciption of this field',\n    required: true,\n    disabled: false\n  },\n  render: args => TextAreaExample(args),\n  play: async ({\n    canvasElement\n  }) => {\n    const canvas = within(canvasElement);\n    const input = canvas.getByPlaceholderText('Placeholder');\n    expect(input.hasAttribute('required')).toBeTruthy();\n    userEvent.type(input, 'Johnny Appleseed');\n    expect(input.value).toEqual('Johnny Appleseed');\n  }\n};\nexport const Disabled = {\n  args: {\n    label: 'First Name',\n    help: 'A clever desciption of this field',\n    required: false,\n    disabled: true\n  },\n  render: args => TextAreaExample(args),\n  play: async ({\n    canvasElement\n  }) => {\n    const canvas = within(canvasElement);\n    const input = canvas.getByPlaceholderText('Placeholder');\n    userEvent.type(input, 'Johnny Appleseed');\n    expect(input.value).toEqual('');\n  }\n};\nDefault.parameters = {\n  ...Default.parameters,\n  docs: {\n    ...Default.parameters?.docs,\n    source: {\n      originalSource: \"{\\n  args: {\\n    label: 'First Name',\\n    help: 'A clever desciption of this field',\\n    required: false,\\n    disabled: false\\n  },\\n  render: args => TextAreaExample(args),\\n  play: async ({\\n    canvasElement\\n  }) => {\\n    const canvas = within(canvasElement);\\n    expect(canvas.getByText('First Name')).toBeInTheDocument();\\n    expect(canvas.getByPlaceholderText('Placeholder')).toBeInTheDocument();\\n    expect(canvas.getByText('A clever desciption of this field')).toBeInTheDocument();\\n  }\\n}\",\n      ...Default.parameters?.docs?.source\n    }\n  }\n};\nFilled.parameters = {\n  ...Filled.parameters,\n  docs: {\n    ...Filled.parameters?.docs,\n    source: {\n      originalSource: \"{\\n  args: {\\n    label: 'First Name',\\n    help: 'A clever desciption of this field',\\n    required: false,\\n    disabled: false\\n  },\\n  render: args => TextAreaExample(args),\\n  play: async ({\\n    canvasElement\\n  }) => {\\n    const canvas = within(canvasElement);\\n    const input = canvas.getByPlaceholderText('Placeholder');\\n    userEvent.type(input, 'Johnny Appleseed');\\n    expect(input.value).toEqual('Johnny Appleseed');\\n  }\\n}\",\n      ...Filled.parameters?.docs?.source\n    }\n  }\n};\nRequired.parameters = {\n  ...Required.parameters,\n  docs: {\n    ...Required.parameters?.docs,\n    source: {\n      originalSource: \"{\\n  args: {\\n    label: 'First Name',\\n    help: 'A clever desciption of this field',\\n    required: true,\\n    disabled: false\\n  },\\n  render: args => TextAreaExample(args),\\n  play: async ({\\n    canvasElement\\n  }) => {\\n    const canvas = within(canvasElement);\\n    const input = canvas.getByPlaceholderText('Placeholder');\\n    expect(input.hasAttribute('required')).toBeTruthy();\\n    userEvent.click(input);\\n  }\\n}\",\n      ...Required.parameters?.docs?.source\n    }\n  }\n};\nValid.parameters = {\n  ...Valid.parameters,\n  docs: {\n    ...Valid.parameters?.docs,\n    source: {\n      originalSource: \"{\\n  args: {\\n    label: 'First Name',\\n    help: 'A clever desciption of this field',\\n    required: true,\\n    disabled: false\\n  },\\n  render: args => TextAreaExample(args),\\n  play: async ({\\n    canvasElement\\n  }) => {\\n    const canvas = within(canvasElement);\\n    const input = canvas.getByPlaceholderText('Placeholder');\\n    expect(input.hasAttribute('required')).toBeTruthy();\\n    userEvent.type(input, 'Johnny Appleseed');\\n    expect(input.value).toEqual('Johnny Appleseed');\\n  }\\n}\",\n      ...Valid.parameters?.docs?.source\n    }\n  }\n};\nDisabled.parameters = {\n  ...Disabled.parameters,\n  docs: {\n    ...Disabled.parameters?.docs,\n    source: {\n      originalSource: \"{\\n  args: {\\n    label: 'First Name',\\n    help: 'A clever desciption of this field',\\n    required: false,\\n    disabled: true\\n  },\\n  render: args => TextAreaExample(args),\\n  play: async ({\\n    canvasElement\\n  }) => {\\n    const canvas = within(canvasElement);\\n    const input = canvas.getByPlaceholderText('Placeholder');\\n    userEvent.type(input, 'Johnny Appleseed');\\n    expect(input.value).toEqual('');\\n  }\\n}\",\n      ...Disabled.parameters?.docs?.source\n    }\n  }\n};"],"names":[],"sourceRoot":""}