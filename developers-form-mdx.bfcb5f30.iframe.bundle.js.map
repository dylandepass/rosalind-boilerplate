{"version":3,"file":"developers-form-mdx.bfcb5f30.iframe.bundle.js","mappings":";;;;AAkBA;;AAEA;AACA;;AAEA;;AAGA;;;ACRA;;AAEA;;AAKA;;AAGA;;;ACZA;;AAEA;;;;;;;;;;;;;;;;AAgBA;;AAGA;;;ACnBA;;AAEA;AACA;;AAEA;;AAGA;;;ACVA;AACA;AACA;;AAGA;;;ACLA;AACA;AACA;;AAGA","sources":["webpack://@rosalind/rosalind-template/./docs/stories/forms/checkbox.stories.js","webpack://@rosalind/rosalind-template/./docs/stories/forms/radio.stories.js","webpack://@rosalind/rosalind-template/./docs/stories/forms/select.stories.js","webpack://@rosalind/rosalind-template/./docs/stories/forms/switch.stories.js","webpack://@rosalind/rosalind-template/./docs/stories/forms/text-area.stories.js","webpack://@rosalind/rosalind-template/./docs/stories/forms/text-field.stories.js"],"sourcesContent":["/* eslint-disable import/no-extraneous-dependencies, no-unused-vars */\n\nimport { within, userEvent } from '@storybook/testing-library';\nimport { expect } from '@storybook/jest';\nimport dedent from 'dedent';\nexport default {\n  title: 'Design System/Atoms/Forms/Checkbox'\n};\nconst CheckboxExample = ({\n  label,\n  required,\n  checked,\n  disabled,\n  help,\n  value\n}) => dedent /* html */`\n    <form>\n      <div class=\"group\">\n        <label for=\"terms\">${label}</label>\n        <div>\n          <input type=\"checkbox\" id=\"terms\" ${checked ? 'checked' : ''}  ${required ? 'required' : ''}  ${disabled ? 'disabled' : ''} onclick=\"(event) => event.target.checked = true\">\n          <label for=\"terms\">${value}</label>\n        </div>\n        <span>${help}</span>\n      </div>\n    </form>`;\nexport const Default = {\n  args: {\n    label: 'Agree to Terms',\n    value: 'Completed Task',\n    help: 'A clever desciption of this field',\n    checked: false,\n    required: false,\n    disabled: false\n  },\n  render: args => CheckboxExample(args),\n  play: async ({\n    canvasElement\n  }) => {\n    const canvas = within(canvasElement);\n    expect(canvas.getByText('Completed Task')).toBeInTheDocument();\n    expect(canvas.getByText('Agree to Terms')).toBeInTheDocument();\n    expect(canvas.getByText('A clever desciption of this field')).toBeInTheDocument();\n  }\n};\nexport const Selected = {\n  args: {\n    label: 'Agree to Terms',\n    value: 'Completed Task',\n    help: 'A clever desciption of this field',\n    required: false,\n    disabled: false\n  },\n  render: args => CheckboxExample(args),\n  play: async ({\n    canvasElement\n  }) => {\n    const checkbox = document.querySelector('#terms');\n    await userEvent.click(checkbox);\n    expect(checkbox.checked).toEqual(true);\n  }\n};\nexport const Disabled = {\n  args: {\n    label: 'Agree to Terms',\n    value: 'Completed Task',\n    help: 'A clever desciption of this field',\n    required: false,\n    disabled: true\n  },\n  render: args => CheckboxExample(args),\n  play: async ({\n    canvasElement\n  }) => {\n    const checkbox = document.querySelector('#terms');\n    await userEvent.click(checkbox);\n    expect(checkbox.checked).toEqual(false);\n  }\n};\nDefault.parameters = {\n  ...Default.parameters,\n  docs: {\n    ...Default.parameters?.docs,\n    source: {\n      originalSource: \"{\\n  args: {\\n    label: 'Agree to Terms',\\n    value: 'Completed Task',\\n    help: 'A clever desciption of this field',\\n    checked: false,\\n    required: false,\\n    disabled: false\\n  },\\n  render: args => CheckboxExample(args),\\n  play: async ({\\n    canvasElement\\n  }) => {\\n    const canvas = within(canvasElement);\\n    expect(canvas.getByText('Completed Task')).toBeInTheDocument();\\n    expect(canvas.getByText('Agree to Terms')).toBeInTheDocument();\\n    expect(canvas.getByText('A clever desciption of this field')).toBeInTheDocument();\\n  }\\n}\",\n      ...Default.parameters?.docs?.source\n    }\n  }\n};\nSelected.parameters = {\n  ...Selected.parameters,\n  docs: {\n    ...Selected.parameters?.docs,\n    source: {\n      originalSource: \"{\\n  args: {\\n    label: 'Agree to Terms',\\n    value: 'Completed Task',\\n    help: 'A clever desciption of this field',\\n    required: false,\\n    disabled: false\\n  },\\n  render: args => CheckboxExample(args),\\n  play: async ({\\n    canvasElement\\n  }) => {\\n    const checkbox = document.querySelector('#terms');\\n    await userEvent.click(checkbox);\\n    expect(checkbox.checked).toEqual(true);\\n  }\\n}\",\n      ...Selected.parameters?.docs?.source\n    }\n  }\n};\nDisabled.parameters = {\n  ...Disabled.parameters,\n  docs: {\n    ...Disabled.parameters?.docs,\n    source: {\n      originalSource: \"{\\n  args: {\\n    label: 'Agree to Terms',\\n    value: 'Completed Task',\\n    help: 'A clever desciption of this field',\\n    required: false,\\n    disabled: true\\n  },\\n  render: args => CheckboxExample(args),\\n  play: async ({\\n    canvasElement\\n  }) => {\\n    const checkbox = document.querySelector('#terms');\\n    await userEvent.click(checkbox);\\n    expect(checkbox.checked).toEqual(false);\\n  }\\n}\",\n      ...Disabled.parameters?.docs?.source\n    }\n  }\n};","/* eslint-disable import/no-extraneous-dependencies, no-unused-vars */\n\nimport { within, userEvent } from '@storybook/testing-library';\nimport { expect } from '@storybook/jest';\nimport dedent from 'dedent';\nexport default {\n  title: 'Design System/Atoms/Forms/Radio'\n};\nconst RadioExample = ({\n  label,\n  required,\n  checked,\n  disabled,\n  help,\n  values\n}) => dedent /* html */`\n    <form>\n        <div class=\"group\">\n        <label for=\"meal\">${label}</label>\n        <div>\n            ${values.map(value => /* html */`\n                        <input id=\"${value.toLowerCase()}\" type=\"radio\" name=\"meal\" ${checked ? 'checked' : ''} ${required ? 'required' : ''}  ${disabled ? 'disabled' : ''}>\n                        <label for=\"${value.toLowerCase()}\">${value}</label>\n                    `).join(' ')}\n        </div>\n        <span>${help}</span>\n        </div>\n    </form>`;\nexport const Default = {\n  args: {\n    label: 'Meal Preference',\n    values: ['Beef', 'Chicken', 'Fish'],\n    help: 'A clever desciption of this field',\n    checked: false,\n    required: false,\n    disabled: false\n  },\n  render: args => RadioExample(args)\n};\nexport const Selected = {\n  args: {\n    label: 'Agree to Terms',\n    values: ['Beef', 'Chicken', 'Fish'],\n    help: 'A clever desciption of this field',\n    required: false,\n    disabled: false\n  },\n  render: args => RadioExample(args),\n  play: async ({\n    canvasElement\n  }) => {\n    const chicken = document.querySelector('#chicken');\n    await userEvent.click(chicken);\n    const beef = document.querySelector('#beef');\n    await userEvent.click(beef);\n    expect(chicken.checked).toEqual(false);\n    expect(beef.checked).toEqual(true);\n  }\n};\nexport const Required = {\n  args: {\n    label: 'Agree to Terms',\n    values: ['Beef', 'Chicken', 'Fish'],\n    help: 'A clever desciption of this field',\n    required: true,\n    disabled: false\n  },\n  render: args => RadioExample(args),\n  play: async ({\n    canvasElement\n  }) => {}\n};\nexport const Disabled = {\n  args: {\n    label: 'Agree to Terms',\n    values: ['Beef', 'Chicken', 'Fish'],\n    help: 'A clever desciption of this field',\n    required: false,\n    disabled: true\n  },\n  render: args => RadioExample(args),\n  play: async ({\n    canvasElement\n  }) => {\n    const radio = document.querySelector('#chicken');\n    await userEvent.click(radio);\n    expect(radio.checked).toEqual(false);\n  }\n};\nDefault.parameters = {\n  ...Default.parameters,\n  docs: {\n    ...Default.parameters?.docs,\n    source: {\n      originalSource: \"{\\n  args: {\\n    label: 'Meal Preference',\\n    values: ['Beef', 'Chicken', 'Fish'],\\n    help: 'A clever desciption of this field',\\n    checked: false,\\n    required: false,\\n    disabled: false\\n  },\\n  render: args => RadioExample(args)\\n}\",\n      ...Default.parameters?.docs?.source\n    }\n  }\n};\nSelected.parameters = {\n  ...Selected.parameters,\n  docs: {\n    ...Selected.parameters?.docs,\n    source: {\n      originalSource: \"{\\n  args: {\\n    label: 'Agree to Terms',\\n    values: ['Beef', 'Chicken', 'Fish'],\\n    help: 'A clever desciption of this field',\\n    required: false,\\n    disabled: false\\n  },\\n  render: args => RadioExample(args),\\n  play: async ({\\n    canvasElement\\n  }) => {\\n    const chicken = document.querySelector('#chicken');\\n    await userEvent.click(chicken);\\n    const beef = document.querySelector('#beef');\\n    await userEvent.click(beef);\\n    expect(chicken.checked).toEqual(false);\\n    expect(beef.checked).toEqual(true);\\n  }\\n}\",\n      ...Selected.parameters?.docs?.source\n    }\n  }\n};\nRequired.parameters = {\n  ...Required.parameters,\n  docs: {\n    ...Required.parameters?.docs,\n    source: {\n      originalSource: \"{\\n  args: {\\n    label: 'Agree to Terms',\\n    values: ['Beef', 'Chicken', 'Fish'],\\n    help: 'A clever desciption of this field',\\n    required: true,\\n    disabled: false\\n  },\\n  render: args => RadioExample(args),\\n  play: async ({\\n    canvasElement\\n  }) => {}\\n}\",\n      ...Required.parameters?.docs?.source\n    }\n  }\n};\nDisabled.parameters = {\n  ...Disabled.parameters,\n  docs: {\n    ...Disabled.parameters?.docs,\n    source: {\n      originalSource: \"{\\n  args: {\\n    label: 'Agree to Terms',\\n    values: ['Beef', 'Chicken', 'Fish'],\\n    help: 'A clever desciption of this field',\\n    required: false,\\n    disabled: true\\n  },\\n  render: args => RadioExample(args),\\n  play: async ({\\n    canvasElement\\n  }) => {\\n    const radio = document.querySelector('#chicken');\\n    await userEvent.click(radio);\\n    expect(radio.checked).toEqual(false);\\n  }\\n}\",\n      ...Disabled.parameters?.docs?.source\n    }\n  }\n};","/* eslint-disable import/no-extraneous-dependencies, no-unused-vars */\n\nimport { within, userEvent } from '@storybook/testing-library';\nimport { expect } from '@storybook/jest';\nimport dedent from 'dedent';\nexport default {\n  title: 'Design System/Atoms/Forms/Select'\n};\nconst SelectExample = ({\n  label,\n  required,\n  disabled,\n  help\n}) => dedent /* html */`\n    <form>\n        <div class=\"group\">\n            <label for=\"car\">${label}</label>\n            <div class=\"select\">\n                <select id=\"car\" ${required ? 'required' : ''}  ${disabled ? 'disabled' : ''}>\n                <option value=\"\" disabled selected hidden>Select car:</option>\n                <option value=\"1\">Audi</option>\n                <option value=\"2\">BMW</option>\n                <option value=\"3\">Citroen</option>\n                <option value=\"4\">Ford</option>\n                <option value=\"5\">Honda</option>\n                <option value=\"6\">Jaguar</option>\n                <option value=\"7\">Land Rover</option>\n                <option value=\"8\">Mercedes</option>\n                <option value=\"9\">Mini</option>\n                <option value=\"10\">Nissan</option>\n                <option value=\"11\">Toyota</option>\n                <option value=\"12\">Volvo</option>\n                </select>\n            </div>\n            <span>${help}</span>\n        </div>\n    </form>`;\nexport const Default = {\n  args: {\n    label: 'Favorite Car Manufacturer',\n    value: 'Airplane Mode',\n    help: 'A clever desciption of this field',\n    required: false,\n    disabled: false\n  },\n  render: args => SelectExample(args),\n  play: async ({\n    canvasElement\n  }) => {\n    const canvas = within(canvasElement);\n    expect(canvas.getByText('Favorite Car Manufacturer')).toBeInTheDocument();\n    expect(canvas.getByText('Select car:')).toBeInTheDocument();\n    expect(canvas.getByText('BMW')).toBeInTheDocument();\n    expect(canvas.getByText('A clever desciption of this field')).toBeInTheDocument();\n  }\n};\nexport const Selected = {\n  args: {\n    label: 'Favorite Car Manufacturer',\n    value: 'Airplane Mode',\n    help: 'A clever desciption of this field',\n    required: false,\n    disabled: false\n  },\n  render: args => SelectExample(args),\n  play: async ({\n    canvasElement\n  }) => {\n    const canvas = within(canvasElement);\n    const select = document.querySelector('select');\n    await userEvent.selectOptions(select, 'BMW');\n    expect(select?.value).toEqual('2');\n  }\n};\nexport const Disabled = {\n  args: {\n    label: 'Favorite Car Manufacturer',\n    help: 'A clever desciption of this field',\n    required: false,\n    disabled: true\n  },\n  render: args => SelectExample(args),\n  play: async ({\n    canvasElement\n  }) => {\n    const canvas = within(canvasElement);\n    const select = document.querySelector('select');\n    await userEvent.selectOptions(select, 'BMW');\n    expect(select.value).toEqual('');\n  }\n};\nDefault.parameters = {\n  ...Default.parameters,\n  docs: {\n    ...Default.parameters?.docs,\n    source: {\n      originalSource: \"{\\n  args: {\\n    label: 'Favorite Car Manufacturer',\\n    value: 'Airplane Mode',\\n    help: 'A clever desciption of this field',\\n    required: false,\\n    disabled: false\\n  },\\n  render: args => SelectExample(args),\\n  play: async ({\\n    canvasElement\\n  }) => {\\n    const canvas = within(canvasElement);\\n    expect(canvas.getByText('Favorite Car Manufacturer')).toBeInTheDocument();\\n    expect(canvas.getByText('Select car:')).toBeInTheDocument();\\n    expect(canvas.getByText('BMW')).toBeInTheDocument();\\n    expect(canvas.getByText('A clever desciption of this field')).toBeInTheDocument();\\n  }\\n}\",\n      ...Default.parameters?.docs?.source\n    }\n  }\n};\nSelected.parameters = {\n  ...Selected.parameters,\n  docs: {\n    ...Selected.parameters?.docs,\n    source: {\n      originalSource: \"{\\n  args: {\\n    label: 'Favorite Car Manufacturer',\\n    value: 'Airplane Mode',\\n    help: 'A clever desciption of this field',\\n    required: false,\\n    disabled: false\\n  },\\n  render: args => SelectExample(args),\\n  play: async ({\\n    canvasElement\\n  }) => {\\n    const canvas = within(canvasElement);\\n    const select = document.querySelector('select');\\n    await userEvent.selectOptions(select, 'BMW');\\n    expect(select?.value).toEqual('2');\\n  }\\n}\",\n      ...Selected.parameters?.docs?.source\n    }\n  }\n};\nDisabled.parameters = {\n  ...Disabled.parameters,\n  docs: {\n    ...Disabled.parameters?.docs,\n    source: {\n      originalSource: \"{\\n  args: {\\n    label: 'Favorite Car Manufacturer',\\n    help: 'A clever desciption of this field',\\n    required: false,\\n    disabled: true\\n  },\\n  render: args => SelectExample(args),\\n  play: async ({\\n    canvasElement\\n  }) => {\\n    const canvas = within(canvasElement);\\n    const select = document.querySelector('select');\\n    await userEvent.selectOptions(select, 'BMW');\\n    expect(select.value).toEqual('');\\n  }\\n}\",\n      ...Disabled.parameters?.docs?.source\n    }\n  }\n};","/* eslint-disable import/no-extraneous-dependencies, no-unused-vars */\n\nimport { within, userEvent } from '@storybook/testing-library';\nimport { expect } from '@storybook/jest';\nimport dedent from 'dedent';\nexport default {\n  title: 'Design System/Atoms/Forms/Switch'\n};\nconst SwitchExample = ({\n  label,\n  required,\n  checked,\n  disabled,\n  help,\n  value\n}) => dedent /* html */`\n    <form>\n      <div class=\"group\">\n        <label for=\"wifi\">${label}</label>\n        <div>\n          <input type=\"checkbox\" id=\"wifi\" class=\"switch\" ${checked ? 'checked' : ''} ${required ? 'required' : ''} ${disabled ? 'disabled' : ''}>\n          <label for=\"wifi\">${value}</label>\n        </div>\n        <span>${help}</span>\n      </div>\n    </form>`;\nexport const Default = {\n  args: {\n    label: 'Wifi Settings',\n    value: 'Airplane Mode',\n    help: 'A clever desciption of this field',\n    checked: false,\n    required: false,\n    disabled: false\n  },\n  render: args => SwitchExample(args)\n};\nexport const Selected = {\n  args: {\n    label: 'Wifi Settings',\n    value: 'Airplane Mode',\n    help: 'A clever desciption of this field',\n    required: false,\n    disabled: false\n  },\n  render: args => SwitchExample(args),\n  play: async ({\n    canvasElement\n  }) => {\n    const switchElement = document.querySelector('#wifi');\n    await userEvent.click(switchElement);\n    expect(switchElement.checked).toEqual(true);\n  }\n};\nexport const Disabled = {\n  args: {\n    label: 'Wifi Settings',\n    value: 'Airplane Mode',\n    help: 'A clever desciption of this field',\n    required: false,\n    disabled: true\n  },\n  render: args => SwitchExample(args),\n  play: async ({\n    canvasElement\n  }) => {\n    const switchElement = document.querySelector('#wifi');\n    await userEvent.click(switchElement);\n    expect(switchElement.checked).toEqual(false);\n  }\n};\nDefault.parameters = {\n  ...Default.parameters,\n  docs: {\n    ...Default.parameters?.docs,\n    source: {\n      originalSource: \"{\\n  args: {\\n    label: 'Wifi Settings',\\n    value: 'Airplane Mode',\\n    help: 'A clever desciption of this field',\\n    checked: false,\\n    required: false,\\n    disabled: false\\n  },\\n  render: args => SwitchExample(args)\\n}\",\n      ...Default.parameters?.docs?.source\n    }\n  }\n};\nSelected.parameters = {\n  ...Selected.parameters,\n  docs: {\n    ...Selected.parameters?.docs,\n    source: {\n      originalSource: \"{\\n  args: {\\n    label: 'Wifi Settings',\\n    value: 'Airplane Mode',\\n    help: 'A clever desciption of this field',\\n    required: false,\\n    disabled: false\\n  },\\n  render: args => SwitchExample(args),\\n  play: async ({\\n    canvasElement\\n  }) => {\\n    const switchElement = document.querySelector('#wifi');\\n    await userEvent.click(switchElement);\\n    expect(switchElement.checked).toEqual(true);\\n  }\\n}\",\n      ...Selected.parameters?.docs?.source\n    }\n  }\n};\nDisabled.parameters = {\n  ...Disabled.parameters,\n  docs: {\n    ...Disabled.parameters?.docs,\n    source: {\n      originalSource: \"{\\n  args: {\\n    label: 'Wifi Settings',\\n    value: 'Airplane Mode',\\n    help: 'A clever desciption of this field',\\n    required: false,\\n    disabled: true\\n  },\\n  render: args => SwitchExample(args),\\n  play: async ({\\n    canvasElement\\n  }) => {\\n    const switchElement = document.querySelector('#wifi');\\n    await userEvent.click(switchElement);\\n    expect(switchElement.checked).toEqual(false);\\n  }\\n}\",\n      ...Disabled.parameters?.docs?.source\n    }\n  }\n};","/* eslint-disable import/no-extraneous-dependencies, no-unused-vars */\n\nimport { within, waitFor, userEvent } from '@storybook/testing-library';\nimport { expect } from '@storybook/jest';\nimport dedent from 'dedent';\nexport default {\n  title: 'Design System/Atoms/Forms/TextArea'\n};\nconst TextAreaExample = ({\n  label,\n  required,\n  disabled,\n  help\n}) => dedent /* html */`\n  <form>\n    <div class=\"group\">\n      <label for=\"name\">${label}</label>\n      <textarea type=\"text\" id=\"name\" placeholder=\"Placeholder\" ${required ? 'required' : ''}  ${disabled ? 'disabled' : ''}></textarea>\n      <span>${help}</span>\n    </div>\n  </form>`;\nexport const Default = {\n  args: {\n    label: 'First Name',\n    help: 'A clever desciption of this field',\n    required: false,\n    disabled: false\n  },\n  render: args => TextAreaExample(args),\n  play: async ({\n    canvasElement\n  }) => {\n    const canvas = within(canvasElement);\n    expect(canvas.getByText('First Name')).toBeInTheDocument();\n    expect(canvas.getByPlaceholderText('Placeholder')).toBeInTheDocument();\n    expect(canvas.getByText('A clever desciption of this field')).toBeInTheDocument();\n  }\n};\nexport const Filled = {\n  args: {\n    label: 'First Name',\n    help: 'A clever desciption of this field',\n    required: false,\n    disabled: false\n  },\n  render: args => TextAreaExample(args),\n  play: async ({\n    canvasElement\n  }) => {\n    const canvas = within(canvasElement);\n    const input = canvas.getByPlaceholderText('Placeholder');\n    userEvent.type(input, 'Johnny Appleseed');\n    expect(input.value).toEqual('Johnny Appleseed');\n  }\n};\nexport const Required = {\n  args: {\n    label: 'First Name',\n    help: 'A clever desciption of this field',\n    required: true,\n    disabled: false\n  },\n  render: args => TextAreaExample(args),\n  play: async ({\n    canvasElement\n  }) => {\n    const canvas = within(canvasElement);\n    const input = canvas.getByPlaceholderText('Placeholder');\n    expect(input.hasAttribute('required')).toBeTruthy();\n    userEvent.click(input);\n  }\n};\nexport const Valid = {\n  args: {\n    label: 'First Name',\n    help: 'A clever desciption of this field',\n    required: true,\n    disabled: false\n  },\n  render: args => TextAreaExample(args),\n  play: async ({\n    canvasElement\n  }) => {\n    const canvas = within(canvasElement);\n    const input = canvas.getByPlaceholderText('Placeholder');\n    expect(input.hasAttribute('required')).toBeTruthy();\n    userEvent.type(input, 'Johnny Appleseed');\n    expect(input.value).toEqual('Johnny Appleseed');\n  }\n};\nexport const Disabled = {\n  args: {\n    label: 'First Name',\n    help: 'A clever desciption of this field',\n    required: false,\n    disabled: true\n  },\n  render: args => TextAreaExample(args),\n  play: async ({\n    canvasElement\n  }) => {\n    const canvas = within(canvasElement);\n    const input = canvas.getByPlaceholderText('Placeholder');\n    userEvent.type(input, 'Johnny Appleseed');\n    expect(input.value).toEqual('');\n  }\n};\nDefault.parameters = {\n  ...Default.parameters,\n  docs: {\n    ...Default.parameters?.docs,\n    source: {\n      originalSource: \"{\\n  args: {\\n    label: 'First Name',\\n    help: 'A clever desciption of this field',\\n    required: false,\\n    disabled: false\\n  },\\n  render: args => TextAreaExample(args),\\n  play: async ({\\n    canvasElement\\n  }) => {\\n    const canvas = within(canvasElement);\\n    expect(canvas.getByText('First Name')).toBeInTheDocument();\\n    expect(canvas.getByPlaceholderText('Placeholder')).toBeInTheDocument();\\n    expect(canvas.getByText('A clever desciption of this field')).toBeInTheDocument();\\n  }\\n}\",\n      ...Default.parameters?.docs?.source\n    }\n  }\n};\nFilled.parameters = {\n  ...Filled.parameters,\n  docs: {\n    ...Filled.parameters?.docs,\n    source: {\n      originalSource: \"{\\n  args: {\\n    label: 'First Name',\\n    help: 'A clever desciption of this field',\\n    required: false,\\n    disabled: false\\n  },\\n  render: args => TextAreaExample(args),\\n  play: async ({\\n    canvasElement\\n  }) => {\\n    const canvas = within(canvasElement);\\n    const input = canvas.getByPlaceholderText('Placeholder');\\n    userEvent.type(input, 'Johnny Appleseed');\\n    expect(input.value).toEqual('Johnny Appleseed');\\n  }\\n}\",\n      ...Filled.parameters?.docs?.source\n    }\n  }\n};\nRequired.parameters = {\n  ...Required.parameters,\n  docs: {\n    ...Required.parameters?.docs,\n    source: {\n      originalSource: \"{\\n  args: {\\n    label: 'First Name',\\n    help: 'A clever desciption of this field',\\n    required: true,\\n    disabled: false\\n  },\\n  render: args => TextAreaExample(args),\\n  play: async ({\\n    canvasElement\\n  }) => {\\n    const canvas = within(canvasElement);\\n    const input = canvas.getByPlaceholderText('Placeholder');\\n    expect(input.hasAttribute('required')).toBeTruthy();\\n    userEvent.click(input);\\n  }\\n}\",\n      ...Required.parameters?.docs?.source\n    }\n  }\n};\nValid.parameters = {\n  ...Valid.parameters,\n  docs: {\n    ...Valid.parameters?.docs,\n    source: {\n      originalSource: \"{\\n  args: {\\n    label: 'First Name',\\n    help: 'A clever desciption of this field',\\n    required: true,\\n    disabled: false\\n  },\\n  render: args => TextAreaExample(args),\\n  play: async ({\\n    canvasElement\\n  }) => {\\n    const canvas = within(canvasElement);\\n    const input = canvas.getByPlaceholderText('Placeholder');\\n    expect(input.hasAttribute('required')).toBeTruthy();\\n    userEvent.type(input, 'Johnny Appleseed');\\n    expect(input.value).toEqual('Johnny Appleseed');\\n  }\\n}\",\n      ...Valid.parameters?.docs?.source\n    }\n  }\n};\nDisabled.parameters = {\n  ...Disabled.parameters,\n  docs: {\n    ...Disabled.parameters?.docs,\n    source: {\n      originalSource: \"{\\n  args: {\\n    label: 'First Name',\\n    help: 'A clever desciption of this field',\\n    required: false,\\n    disabled: true\\n  },\\n  render: args => TextAreaExample(args),\\n  play: async ({\\n    canvasElement\\n  }) => {\\n    const canvas = within(canvasElement);\\n    const input = canvas.getByPlaceholderText('Placeholder');\\n    userEvent.type(input, 'Johnny Appleseed');\\n    expect(input.value).toEqual('');\\n  }\\n}\",\n      ...Disabled.parameters?.docs?.source\n    }\n  }\n};","/* eslint-disable import/no-extraneous-dependencies, no-unused-vars */\n\nimport { within, waitFor, userEvent } from '@storybook/testing-library';\nimport { expect } from '@storybook/jest';\nimport dedent from 'dedent';\nexport default {\n  title: 'Design System/Atoms/Forms/TextField'\n};\nconst TextFieldExample = ({\n  label,\n  required,\n  disabled,\n  help\n}) => dedent /* html */`\n  <form>\n    <div class=\"group\">\n      <label for=\"name\">${label}</label>\n      <input type=\"text\" id=\"name\" placeholder=\"Placeholder\" ${required ? 'required' : ''} ${disabled ? 'disabled' : ''}/>\n      <span>${help}</span>\n    </div>\n  </form>`;\nexport const Default = {\n  args: {\n    label: 'First Name',\n    help: 'A clever desciption of this field',\n    required: false,\n    disabled: false\n  },\n  render: args => TextFieldExample(args),\n  play: async ({\n    canvasElement\n  }) => {\n    const canvas = within(canvasElement);\n    expect(canvas.getByText('First Name')).toBeInTheDocument();\n    expect(canvas.getByPlaceholderText('Placeholder')).toBeInTheDocument();\n    expect(canvas.getByText('A clever desciption of this field')).toBeInTheDocument();\n  }\n};\nexport const Filled = {\n  args: {\n    label: 'First Name',\n    help: 'A clever desciption of this field',\n    required: false,\n    disabled: false\n  },\n  render: args => TextFieldExample(args),\n  play: async ({\n    canvasElement\n  }) => {\n    const canvas = within(canvasElement);\n    const input = canvas.getByPlaceholderText('Placeholder');\n    userEvent.type(input, 'Johnny Appleseed');\n    expect(input.value).toEqual('Johnny Appleseed');\n  }\n};\nexport const Required = {\n  args: {\n    label: 'First Name',\n    help: 'A clever desciption of this field',\n    required: true,\n    disabled: false\n  },\n  render: args => TextFieldExample(args),\n  play: async ({\n    canvasElement\n  }) => {\n    const canvas = within(canvasElement);\n    const input = canvas.getByPlaceholderText('Placeholder');\n    expect(input.hasAttribute('required')).toBeTruthy();\n    userEvent.click(input);\n  }\n};\nexport const Valid = {\n  args: {\n    label: 'First Name',\n    help: 'A clever desciption of this field',\n    required: true,\n    disabled: false\n  },\n  render: args => TextFieldExample(args),\n  play: async ({\n    canvasElement\n  }) => {\n    const canvas = within(canvasElement);\n    const input = canvas.getByPlaceholderText('Placeholder');\n    expect(input.hasAttribute('required')).toBeTruthy();\n    userEvent.type(input, 'Johnny Appleseed');\n    expect(input.value).toEqual('Johnny Appleseed');\n  }\n};\nexport const Disabled = {\n  args: {\n    label: 'First Name',\n    help: 'A clever desciption of this field',\n    required: false,\n    disabled: true\n  },\n  render: args => TextFieldExample(args),\n  play: async ({\n    canvasElement\n  }) => {\n    const canvas = within(canvasElement);\n    const input = canvas.getByPlaceholderText('Placeholder');\n    userEvent.type(input, 'Johnny Appleseed');\n    expect(input.value).toEqual('');\n  }\n};\nDefault.parameters = {\n  ...Default.parameters,\n  docs: {\n    ...Default.parameters?.docs,\n    source: {\n      originalSource: \"{\\n  args: {\\n    label: 'First Name',\\n    help: 'A clever desciption of this field',\\n    required: false,\\n    disabled: false\\n  },\\n  render: args => TextFieldExample(args),\\n  play: async ({\\n    canvasElement\\n  }) => {\\n    const canvas = within(canvasElement);\\n    expect(canvas.getByText('First Name')).toBeInTheDocument();\\n    expect(canvas.getByPlaceholderText('Placeholder')).toBeInTheDocument();\\n    expect(canvas.getByText('A clever desciption of this field')).toBeInTheDocument();\\n  }\\n}\",\n      ...Default.parameters?.docs?.source\n    }\n  }\n};\nFilled.parameters = {\n  ...Filled.parameters,\n  docs: {\n    ...Filled.parameters?.docs,\n    source: {\n      originalSource: \"{\\n  args: {\\n    label: 'First Name',\\n    help: 'A clever desciption of this field',\\n    required: false,\\n    disabled: false\\n  },\\n  render: args => TextFieldExample(args),\\n  play: async ({\\n    canvasElement\\n  }) => {\\n    const canvas = within(canvasElement);\\n    const input = canvas.getByPlaceholderText('Placeholder');\\n    userEvent.type(input, 'Johnny Appleseed');\\n    expect(input.value).toEqual('Johnny Appleseed');\\n  }\\n}\",\n      ...Filled.parameters?.docs?.source\n    }\n  }\n};\nRequired.parameters = {\n  ...Required.parameters,\n  docs: {\n    ...Required.parameters?.docs,\n    source: {\n      originalSource: \"{\\n  args: {\\n    label: 'First Name',\\n    help: 'A clever desciption of this field',\\n    required: true,\\n    disabled: false\\n  },\\n  render: args => TextFieldExample(args),\\n  play: async ({\\n    canvasElement\\n  }) => {\\n    const canvas = within(canvasElement);\\n    const input = canvas.getByPlaceholderText('Placeholder');\\n    expect(input.hasAttribute('required')).toBeTruthy();\\n    userEvent.click(input);\\n  }\\n}\",\n      ...Required.parameters?.docs?.source\n    }\n  }\n};\nValid.parameters = {\n  ...Valid.parameters,\n  docs: {\n    ...Valid.parameters?.docs,\n    source: {\n      originalSource: \"{\\n  args: {\\n    label: 'First Name',\\n    help: 'A clever desciption of this field',\\n    required: true,\\n    disabled: false\\n  },\\n  render: args => TextFieldExample(args),\\n  play: async ({\\n    canvasElement\\n  }) => {\\n    const canvas = within(canvasElement);\\n    const input = canvas.getByPlaceholderText('Placeholder');\\n    expect(input.hasAttribute('required')).toBeTruthy();\\n    userEvent.type(input, 'Johnny Appleseed');\\n    expect(input.value).toEqual('Johnny Appleseed');\\n  }\\n}\",\n      ...Valid.parameters?.docs?.source\n    }\n  }\n};\nDisabled.parameters = {\n  ...Disabled.parameters,\n  docs: {\n    ...Disabled.parameters?.docs,\n    source: {\n      originalSource: \"{\\n  args: {\\n    label: 'First Name',\\n    help: 'A clever desciption of this field',\\n    required: false,\\n    disabled: true\\n  },\\n  render: args => TextFieldExample(args),\\n  play: async ({\\n    canvasElement\\n  }) => {\\n    const canvas = within(canvasElement);\\n    const input = canvas.getByPlaceholderText('Placeholder');\\n    userEvent.type(input, 'Johnny Appleseed');\\n    expect(input.value).toEqual('');\\n  }\\n}\",\n      ...Disabled.parameters?.docs?.source\n    }\n  }\n};"],"names":[],"sourceRoot":""}