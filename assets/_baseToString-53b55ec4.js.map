{"version":3,"file":"_baseToString-53b55ec4.js","sources":["../../node_modules/lodash/_arrayMap.js","../../node_modules/lodash/isSymbol.js","../../node_modules/lodash/_baseToString.js"],"sourcesContent":["/**\n * A specialized version of `_.map` for arrays without support for iteratee\n * shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the new mapped array.\n */\nfunction arrayMap(array, iteratee) {\n  var index = -1,\n      length = array == null ? 0 : array.length,\n      result = Array(length);\n\n  while (++index < length) {\n    result[index] = iteratee(array[index], index, array);\n  }\n  return result;\n}\n\nmodule.exports = arrayMap;\n","var baseGetTag = require('./_baseGetTag'),\n    isObjectLike = require('./isObjectLike');\n\n/** `Object#toString` result references. */\nvar symbolTag = '[object Symbol]';\n\n/**\n * Checks if `value` is classified as a `Symbol` primitive or object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n * @example\n *\n * _.isSymbol(Symbol.iterator);\n * // => true\n *\n * _.isSymbol('abc');\n * // => false\n */\nfunction isSymbol(value) {\n  return typeof value == 'symbol' ||\n    (isObjectLike(value) && baseGetTag(value) == symbolTag);\n}\n\nmodule.exports = isSymbol;\n","var Symbol = require('./_Symbol'),\n    arrayMap = require('./_arrayMap'),\n    isArray = require('./isArray'),\n    isSymbol = require('./isSymbol');\n\n/** Used as references for various `Number` constants. */\nvar INFINITY = 1 / 0;\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolToString = symbolProto ? symbolProto.toString : undefined;\n\n/**\n * The base implementation of `_.toString` which doesn't convert nullish\n * values to empty strings.\n *\n * @private\n * @param {*} value The value to process.\n * @returns {string} Returns the string.\n */\nfunction baseToString(value) {\n  // Exit early for strings to avoid a performance hit in some environments.\n  if (typeof value == 'string') {\n    return value;\n  }\n  if (isArray(value)) {\n    // Recursively convert values (susceptible to call stack limits).\n    return arrayMap(value, baseToString) + '';\n  }\n  if (isSymbol(value)) {\n    return symbolToString ? symbolToString.call(value) : '';\n  }\n  var result = (value + '');\n  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n}\n\nmodule.exports = baseToString;\n"],"names":["arrayMap","array","iteratee","index","length","result","_arrayMap","baseGetTag","require$$0","isObjectLike","require$$1","symbolTag","isSymbol","value","isSymbol_1","Symbol","isArray","require$$2","require$$3","INFINITY","symbolProto","symbolToString","baseToString","_baseToString"],"mappings":"+DASA,SAASA,EAASC,EAAOC,EAAU,CAKjC,QAJIC,EAAQ,GACRC,EAASH,GAAS,KAAO,EAAIA,EAAM,OACnCI,EAAS,MAAMD,CAAM,EAElB,EAAED,EAAQC,GACfC,EAAOF,CAAK,EAAID,EAASD,EAAME,CAAK,EAAGA,EAAOF,CAAK,EAErD,OAAOI,CACT,CAEA,IAAAC,EAAiBN,ECpBbO,EAAaC,EACbC,EAAeC,EAGfC,EAAY,kBAmBhB,SAASC,EAASC,EAAO,CACvB,OAAO,OAAOA,GAAS,UACpBJ,EAAaI,CAAK,GAAKN,EAAWM,CAAK,GAAKF,CACjD,CAEA,IAAAG,EAAiBF,EC5BbG,EAASP,EACTR,EAAWU,EACXM,EAAUC,EACVL,EAAWM,EAGXC,EAAW,EAAI,EAGfC,EAAcL,EAASA,EAAO,UAAY,OAC1CM,EAAiBD,EAAcA,EAAY,SAAW,OAU1D,SAASE,EAAaT,EAAO,CAE3B,GAAI,OAAOA,GAAS,SAClB,OAAOA,EAET,GAAIG,EAAQH,CAAK,EAEf,OAAOb,EAASa,EAAOS,CAAY,EAAI,GAEzC,GAAIV,EAASC,CAAK,EAChB,OAAOQ,EAAiBA,EAAe,KAAKR,CAAK,EAAI,GAEvD,IAAIR,EAAUQ,EAAQ,GACtB,OAAQR,GAAU,KAAQ,EAAIQ,GAAU,CAACM,EAAY,KAAOd,CAC9D,CAEA,IAAAkB,EAAiBD"}